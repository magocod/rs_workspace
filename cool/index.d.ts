/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function writeFileSync(file: string, data: Buffer): void
export function readFileSynchronous(file: string): Buffer
export function existsSynchronous(file: string): boolean
export function cache(): GlobalCacheMap
export function oclCache(): Array<GlobalArrayAssigned>
export function addGlobalVec(a: number): void
export function showGlobalVec(): void
export function getGlobalVec(): Array<number>
export const DEFAULT_VECTOR_SIZE: number
export const DEFAULT_GLOBAL_ARRAY_COUNT: number
export function sum(a: number, b: number): number
export interface GlobalArrayAssigned {
  index: number
  size: bigint
}
export class FileHandle {
  static open(path: string): FileHandle
  fd(): number
  writeFile(data: Buffer): Promise<void>
  readFile(): Promise<Buffer>
}
export class OclBlock {
  constructor(vectorSize: number, globalArrayCount: number)
  initialize(): void
  enqueueBuffer(jsBuffer: Buffer, globalArrayIndex?: number | undefined | null): number
  dequeueBuffer(globalArrayIndex: number): Buffer
  getGlobalArrays(): Array<GlobalArrayAssigned>
}
